import React, { useState, useEffect } from "react";
import "../styles/accounting-styling.css";
import Table from "../components/table/Table.jsx";
import Search from "../components/Search/Search.jsx";
import NotifModal from "../components/modalNotif/NotifModal";
import axios from "axios";

const FinancialReport = () => {
  const [data, setData] = useState([]);
  const [searching, setSearching] = useState("");
  const [loading, setLoading] = useState(true);
  const [validation, setValidation] = useState({
    isOpen: false,
    type: "warning",
    title: "",
    message: "",
  });

  // Update columns to match FinancialReport model
  const columns = [
    "Report ID",
    "Report Type",
    "Total Cost",
    "Start Date",
    "End Date",
    "Generated By",
  ];

  // API endpoint
  const API_URL =
    import.meta.env.VITE_API_URL || "https://vyr3yqctq8.execute-api.ap-southeast-1.amazonaws.com/dev";
  const FINANCIAL_REPORTS_ENDPOINT = `${API_URL}/api/financial-reports/`;

  // Fetch data from API
  const fetchData = async () => {
    try {
      setLoading(true);
      const response = await axios.get(FINANCIAL_REPORTS_ENDPOINT);
      console.log("API Data:", response.data);

      // Map API data to array format for Table
      const rowData = response.data.map((row) => [
        row.report_id,
        row.report_type,
        row.total_cost, // Consider formatting as string if needed
        row.start_date,
        row.end_date || "N/A", // Handle null end_date
        row.generated_by,
      ]);
      console.log("Row Data:", rowData);

      setData(rowData);
    } catch (error) {
      console.error("Error fetching data:", error.response ? error.response.data : error);
      setValidation({
        isOpen: true,
        type: "error",
        title: "Fetch Error",
        message: "Failed to load financial reports. Please check your connection.",
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  // Filter data based on search input
  const filteredData = data.filter((row) =>
    columns.some((_, index) =>
      row[index]?.toString().toLowerCase().includes(searching.toLowerCase())
    )
  );

  // Calculate total cost from filtered data
  const totalCost = filteredData.reduce((sum, row) => sum + Number(row[2] || 0), 0); // total_cost is index 2
  const formattedTotalCost = totalCost.toLocaleString("en-US", {
    style: "currency",
    currency: "USD",
  });

  console.log("Current State:", { loading, validation, data, filteredData });

  return (
    <div className="FinancialReport">
      <div className="body-content-container">
        <div className="title-subtitle-container">
          <h1 className="subModule-title">Financial Report</h1>
        </div>
        <div className="parent-component-container">
          <Search
            type="text"
            placeholder="Search by Report ID, Type, Generated By..."
            value={searching}
            onChange={(e) => setSearching(e.target.value)}
          />
        </div>

        {loading ? (
          <p>Loading...</p>
        ) : validation.isOpen ? (
          <div>
            <p>Error: {validation.message}</p>
            <button
              onClick={() => {
                setValidation({ ...validation, isOpen: false });
                fetchData();
              }}
            >
              Retry
            </button>
          </div>
        ) : filteredData.length === 0 ? (
          <p>No financial reports found</p>
        ) : (
          <>
            <Table data={filteredData} columns={columns} enableCheckbox={false} />
            <div className="grid grid-cols-7 gap-4 mt-4 items-center border-t pt-2 font-light text-sm">
              <div className="col-span-3"></div>
              <div className="font-bold">Total Cost</div>
              <div>{formattedTotalCost}</div>
              <div></div>
              <div></div>
            </div>
          </>
        )}
        {validation.isOpen && (
          <NotifModal
            isOpen={validation.isOpen}
            onClose={() => setValidation({ ...validation, isOpen: false })}
            type={validation.type}
            title={validation.title}
            message={validation.message}
          />
        )}
      </div>
    </div>
  );
};

export default FinancialReport;